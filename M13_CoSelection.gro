include gro

fp := fopen ( "C:\Users\Ismael\Desktop\SYN_BIO\GRO\co-selection.csv", "w" );
fprint (fp, "Yes, Not, Taut, Cont\n");

fun exp x . 1 + x + x^2/2 + x^3/6 + x^4/24;
fun exp_inverse x. 1.0 / exp(x);
fun abs x. if x < 0 then (- x) else x end;
Pi := 3.14159;


M13_Diffusion :=  4.0 ; //[um^2/dt] ; 0.00808 (calculated value) 
M13_Degradation := 0.01; //
M13_Concentration := 0.5; //# phages updated per timestep for 100 phages/hour release ; 0.17189219 (calculated value) 
M_13_Elimination_Rate := 0.000051344 * 1.8 ; // [dt^-1] ; approx. (M13 has 4.5 hour plasma half-life) 
EclipseTimeRange := rand(101.0)/100.0 + 4.5; //approx. time needed for enough M13 phages to be generated within cell for progeny release /* rand(101.0)/100.0 + 4.5 */
SearchTimeRange := rand(101.0) / 100.0 + 4.0; //approx time needed for phages to detect and infect bacteria /* rand(101.0) / 100.0 + 4.0 */

M13_A := signal(M13_Diffusion, M13_Degradation);
M13_N := signal(M13_Diffusion, M13_Degradation);

num_cells := 17.0;
infected_cells := 0.0;
healthy_cells := num_cells - infected_cells;
num_phages := 0.0;
MOI := 0.0;
probablity_infected := 0.0;

nYes  := 100; nYesA  := 0; nYesN  := 0;
nNot  := 100; nNotA  := 0; nNotN  := 0;
nTaut := 100; nTautA := 0; nTautN := 0;
nCont := 100; nContA := 0; nContN := 0;

killing_rate := 0.0167;
set ("population_max", 8500);
set ( "dt", 0.05 );
set ("growth_rate", 0.023);
n := 0;

program Bc() := {
	r := [infected_A:=0, infected_N:=0, prob_die:=0];
	rfp:=0;
	true : {
		rfp := 1000;
	}
	
	get_signal(M13_A) > 0.05 & r.infected_A = 0 & r.infected_N = 0 :{
		r.infected_A := 1;
		absorb_signal(M13_A, get_signal(M13_A));
	}
	
	get_signal (M13_N) > 0.05 & r.infected_N = 0 & r.infected_A = 0 :{
		r.infected_N := 1;
		absorb_signal(M13_N, get_signal(M13_N));
	}
	
	r.infected_A = 0 & r.infected_N = 0 : {
		r.prob_die := 0;
	}
	
	r.infected_A = 1 & r.infected_N = 0 : {
		r.prob_die := killing_rate; //probability of dying --> Toxin strength
		emit_signal(M13_A, M13_Concentration);
	}
	
	r.infected_A = 0 & r.infected_N = 1 : {
		r.prob_die := 0; //probability of dying --> Toxin strength
		emit_signal(M13_N, M13_Concentration);
	}
	
	rate (r.prob_die) :{
		die();
	}
	
};

program Bn() := {
	r := [infected_A:=0, infected_N:=0, prob_die:=0];
	yfp:=0;
	true : {
		yfp := 1000;
	}
	
	get_signal (M13_A) > 0.5 & r.infected_A = 0 & r.infected_N = 0 : {
		r.infected_A := 1;
		absorb_signal(M13_A, get_signal(M13_A));
	}
	
	get_signal (M13_N) > 0.5 & r.infected_N = 0 & r.infected_N = 0 :{
		r.infected_N := 1;
		absorb_signal(M13_N, get_signal(M13_N));
	}
	
	r.infected_A = 0 & r.infected_N = 0 : {
		r.prob_die := killing_rate; //probability of dying --> Toxin strength
	}	
	
	r.infected_A = 1 & r.infected_N = 0 : {
		r.prob_die := killing_rate; //probability of dying --> Toxin strength
		emit_signal(M13_A, M13_Concentration);
	}
	
	r.infected_A = 0 & r.infected_N = 1 : {
		r.prob_die := 0; //probability of dying --> Toxin strength
		emit_signal(M13_N, M13_Concentration);
	}
	
	rate (r.prob_die) :{
		die();
	}
	
};

program Bt() := {
	r := [infected_A:=0, infected_N:=0, prob_die:=0];
	cfp:=0;
	true : {
		cfp := 1000;
	}
	
	get_signal (M13_A) > 0.5 & r.infected_A = 0 & r.infected_N = 0 : {
		r.infected_A := 1;
		absorb_signal(M13_A, get_signal(M13_A));
	}
	
	get_signal (M13_N) > 0.5 & r.infected_N = 0 & r.infected_N = 0 :{
		r.infected_N := 1;
		absorb_signal(M13_N, get_signal(M13_N));		
	}
	
	r.infected_A = 0 & r.infected_N = 1 : {
		r.prob_die := killing_rate; //probability of dying --> Toxin strength
		emit_signal(M13_N, M13_Concentration);
	}
	
	r.infected_A = 1 & r.infected_N = 0 : {
		r.prob_die :=0;
		emit_signal(M13_A, M13_Concentration);
	}
	
	r.infected_A = 0 & r.infected_N = 0 : {
		r.prob_die := killing_rate; //probability of dying --> Toxin strength
	}
	
	rate (r.prob_die) :{
		die();
	}
};

program By() := {
	r := [infected_A:=0, infected_N:=0, prob_die:=0];
	gfp:=0;
	true : {
		gfp := 1000;
	}
	
	get_signal (M13_A) > 0.5 & r.infected_A = 0 & r.infected_N = 0 : {
		r.infected_A := 1;
		absorb_signal(M13_A, get_signal(M13_A));
	}
	
	get_signal (M13_N) > 0.5 & r.infected_N = 0 & r.infected_A = 0 :{
		r.infected_N := 1;
		absorb_signal(M13_N, get_signal(M13_N));
	}
	
	r.infected_A = 0 & r.infected_N = 1 : {
		r.prob_die := killing_rate;
		emit_signal(M13_N, M13_Concentration);
	}
	
	r.infected_A = 1 & r.infected_N = 0 : {
		r.prob_die := 0;
		emit_signal(M13_A, M13_Concentration);
	}
	
	r.infected_A = 0 & r.infected_N = 0 : {
		r.prob_die := 0;
	}
	
	rate (r.prob_die) :{
		die();
	}
};

program main() := {
	input_time := 80;
	input_counter := 0;
	mode := 0;
	
	input_counter < input_time & mode = 0 : {
		input_counter := input_counter + dt;
	};
	
	//When time reaches a given time, initialize signals
	input_counter > input_time & mode = 0 : {
		foreach i in range 50 do{
			set_signal(M13_A , rand(200)-100 , rand(800)-400 , 10);
		} end;
		foreach i in range 50 do{
			set_signal(M13_N , rand(200)-100 , rand(800)-400 , 10);
		};
		input_counter:=0;
		mode:=1;
	}
};

//Initialize each type of bacteria
foreach i in range 100 do{
	ecoli ( [x := rand(400)-200, y := rand(400)-200], program Bn());	
} end;
foreach i in range 25 do{
	ecoli ( [x := rand(400)-200, y := rand(400)-200], program Bt());
};
foreach i in range 25 do{
	ecoli ( [x := rand(400)-200, y := rand(400)-200], program By());
};
foreach i in range 25 do{
	ecoli ( [x := rand(400)-200, y := rand(400)-200], program Bc());
};